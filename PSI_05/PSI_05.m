function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 05-Dec-2016 00:52:14.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx2 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx64 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
IW1_1 = [25.14093959731543 85.738255033557039;25.85211267605634 78.936619718309871;26.327731092436974 72.063025210084021;26.785087719298222 65.131578947368453;26.444444444444446 51.433333333333351;15.415458937198068 39.376811594202898;3.5612648221343872 31.735177865612638;2.6590909090909087 25.25;14.547999999999995 86.012;19.11904761904762 80.412698412698376;19.894009216589868 66.723502304147488;26.838709677419352 58.026881720430111;21.188811188811183 44.090909090909079;12.011834319526622 29.704142011834332;7.1989247311828004 26.005376344086024;3.9094488188976344 19.011811023622052;4.6245614035087739 85.631578947368439;11.303964757709249 80.960352422907448;19.05809128630704 73.008298755186715;22.033333333333331 60.988888888888866;26.66350710900473 45.521327014218002;17.153005464480884 33.88524590163933;11.840375586854458 22.652582159624416;4.3437499999999991 11.703124999999998;4.3860294117647056 79.084558823529434;12.991596638655453 74.852941176470608;15.715555555555552 59.959999999999994;20.050632911392405 49.822784810126585;27.338235294117659 37.416666666666671;17.492462311557798 27.020100502512566;10.187999999999999 15.888;5.0293255131964774 3.5571847507331356;2.8287292817679552 72.314917127071794;8.4341463414634159 71.687804878048823;13.137339055793994 66.545064377682394;20.194444444444436 55.333333333333321;21.837209302325579 38.656976744186061;26.999999999999996 29.854166666666668;16.842857142857142 20.109523809523814;12.066914498141264 8.3494423791821557;4.2089552238805963 66.104477611940283;8.7485380116959028 62.163742690058484;14.112903225806448 52.080645161290342;15.646067415730338 45.556179775280867;22.280701754385976 32.152046783625721;27.456249999999994 22.931250000000006;17.343478260869571 13.200000000000001;15.57377049180328 3.0983606557377041;3.3154761904761894 60.095238095238095;10.208791208791201 56.961538461538474;8.1627906976744189 50.616279069767444;9.808383233532938 45.233532934131723;9.6506024096385552 40.036144578313269;22.648648648648653 24.929729729729733;26.328205128205123 16.466666666666665;20.571428571428569 7.8571428571428568;3.6686390532544388 54.946745562130147;2.8986486486486491 50.067567567567565;3.2753623188405805 44.487922705313991;3.373684210526315 38.663157894736834;9.5047169811320789 34.523584905660364;21.830000000000009 18.275000000000002;26.389140271493194 10.090497737556559;25.552419354838705 3.3709677419354844];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    % no processing
    
    % Layer 1
    z1 = negdist_apply(IW1_1,X{1,ts});
    a1 = compet_apply(z1);
    
    % Output 1
    Y{1,ts} = a1;
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(1,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Negative Distance Weight Function
function z = negdist_apply(w,p,~)
[S,R] = size(w);
Q = size(p,2);
if isa(w,'gpuArray')
    z = iNegDistApplyGPU(w,p,R,S,Q);
else
    z = iNegDistApplyCPU(w,p,S,Q);
end
end
function z = iNegDistApplyCPU(w,p,S,Q)
z = zeros(S,Q);
if (Q<S)
    pt = p';
    for q=1:Q
        z(:,q) = sum(bsxfun(@minus,w,pt(q,:)).^2,2);
    end
else
    wt = w';
    for i=1:S
        z(i,:) = sum(bsxfun(@minus,wt(:,i),p).^2,1);
    end
end
z = -sqrt(z);
end
function z = iNegDistApplyGPU(w,p,R,S,Q)
p = reshape(p,1,R,Q);
sd = arrayfun(@iNegDistApplyGPUHelper,w,p);
z = -sqrt(reshape(sum(sd,2),S,Q));
end
function sd = iNegDistApplyGPUHelper(w,p)
sd = (w-p) .^ 2;
end

% Competitive Transfer Function
function a = compet_apply(n,~)
if isempty(n)
    a = n;
else
    [S,Q] = size(n);
    nanInd = any(isnan(n),1);
    a = zeros(S,Q,'like',n);
    [~,maxRows] = max(n,[],1);
    onesInd = maxRows + S*(0:(Q-1));
    a(onesInd) = 1;
    a(:,nanInd) = NaN;
end
end
